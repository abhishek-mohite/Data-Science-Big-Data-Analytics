A)Write a program to calculate GCD of Given Two Numbers 

#include <iostream>

int gcd(int a, int b) {
    while (b != 0) {
        int temp = b;
        b = a % b;
        a = temp;
    }
    return a;
}

int main() {
    int num1, num2;

    std::cout << "Enter First number: ";
    std::cin >> num1;
    
    std::cout << "Enter Second number: ";
    std::cin >> num2;

    int result = gcd(num1, num2);

    std::cout << "GCD of " << num1 << " and " << num2 << " is: " << result << std::endl;

    return 0;
}


B)Write a program to solve Tower of Hanoi puzzle

#include <iostream>

void towerOfHanoi(int n, char source, char auxiliary, char target) {
    if (n == 1) {
        std::cout << "Move disk 1 from " << source << " to " << target << std::endl;
        return;
    }

    // Move n-1 disks from source to auxiliary using target as the auxiliary peg
    towerOfHanoi(n - 1, source, target, auxiliary);

    // Move the nth disk from source to target
    std::cout << "Move disk " << n << " from " << source << " to " << target << std::endl;

    // Move the n-1 disks from auxiliary to target using source as the auxiliary peg
    towerOfHanoi(n - 1, auxiliary, source, target);
}

int main() {
    int numDisks;
    std::cout << "Enter the number of disks: ";
    std::cin >> numDisks;

    towerOfHanoi(numDisks, 'A', 'B', 'C');

    return 0;
}



C) Write a program to find Factorial of given no using iterative and recursive algorithm

#include <iostream>

unsigned long long factorialIterative(int n) {
    unsigned long long result = 1;
    for (int i = 1; i <= n; i++) {
        result *= i;
    }
    return result;
}

int main() {
    int num;
    std::cout << "Enter a number: ";
    std::cin >> num;

    if (num < 0) {
        std::cout << "Factorial is not defined for negative numbers." << std::endl;
    } else {
        unsigned long long result = factorialIterative(num);
        std::cout << "Factorial of " << num << " (iterative) is: " << result << std::endl;
    }

    return 0;
}


#include <iostream>

unsigned long long factorialRecursive(int n) {
    if (n == 0) {
        return 1;
    }
    return n * factorialRecursive(n - 1);
}

int main() {
    int num;
    std::cout << "Enter a number: ";
    std::cin >> num;

    if (num < 0) {
        std::cout << "Factorial is not defined for negative numbers." << std::endl;
    } else {
        unsigned long long result = factorialRecursive(num);
        std::cout << "Factorial of " << num << " (recursive) is: " << result << std::endl;
    }

    return 0;
}



D) Implement job scheduling with deadlines using a greedy method

#include <algorithm>
#include <iostream>
using namespace std;
 

struct Job {
   
    char id; 
    int dead; 
    int profit; 
                
};
 

bool comparison(Job a, Job b)
{
    return (a.profit > b.profit);
}
 

void printJobScheduling(Job arr[], int n)
{

    sort(arr, arr + n, comparison);
 
    int result[n]; 
    bool slot[n]; 
 

    for (int i = 0; i < n; i++)
        slot[i] = false;
 

    for (int i = 0; i < n; i++) {
 
        for (int j = min(n, arr[i].dead) - 1; j >= 0; j--) {
            if (slot[j] == false) {
                result[j] = i; 
                slot[j] = true; 
                break;
            }
        }
    }
 

    for (int i = 0; i < n; i++)
        if (slot[i])
            cout << arr[result[i]].id << " ";
}
 

int main()
{
    Job arr[] = { { 'a', 2, 100 },
                  { 'b', 1, 19 },
                  { 'c', 2, 27 },
                  { 'd', 1, 25 },
                  { 'e', 3, 15 } };
   
    int n = sizeof(arr) / sizeof(arr[0]);
    cout << "Following is maximum profit sequence of jobs "
            "\n";
 
   
    printJobScheduling(arr, n);
    return 0;
}
 

 //output
// Following is maximum profit sequence of jobs 
// c a e 



E) Write a program to solve a 0-1 Knapsack problem using dynamic programming or branch and bound strategy

#include <bits/stdc++.h> 
using namespace std; 


int max(int a, int b) { return (a > b) ? a : b; } 


int knapSack(int W, int wt[], int val[], int n) 
{ 


    if (n == 0 || W == 0) 
        return 0; 

    if (wt[n - 1] > W) 
        return knapSack(W, wt, val, n - 1); 


    else
        return max( 
            val[n - 1] 
                + knapSack(W - wt[n - 1], wt, val, n - 1), 
            knapSack(W, wt, val, n - 1)); 
} 


int main() 
{ 
    int profit[] = { 60, 100, 120 }; 
    int weight[] = { 10, 20, 30 }; 
    int W = 50; 
    int n = sizeof(profit) / sizeof(profit[0]); 
    cout << "Maximum value in the knapsack: " << knapSack(W, weight, profit, n); 
    return 0; 
} 


//output
//220


F) Write a program to solve a Travelling Salesman Problem using dynamic programming or branch and bound strategy

#include <bits/stdc++.h>
using namespace std;
#define V 4


int travllingSalesmanProblem(int graph[][V], int s)
{
    vector<int> vertex;
    for (int i = 0; i < V; i++)
        if (i != s)
            vertex.push_back(i);

    int min_path = INT_MAX;
    do {

        int current_pathweight = 0;

        int k = s;
        for (int i = 0; i < vertex.size(); i++) {
            current_pathweight += graph[k][vertex[i]];
            k = vertex[i];
        }
        current_pathweight += graph[k][s];

        min_path = min(min_path, current_pathweight);

    } while (
        next_permutation(vertex.begin(), vertex.end()));

    return min_path;
}


int main()
{
    int graph[][V] = { { 0, 10, 15, 20 },
                    { 10, 0, 35, 25 },
                    { 15, 35, 0, 30 },
                    { 20, 25, 30, 0 } };
    int s = 0;
    cout << "Minimum distance for TSP: "<< travllingSalesmanProblem(graph, s) << endl;
    return 0;
}


//output
//80


G) Implement Merge Sort and Quick Sort algorithm using Amortized Analysis 

// C++ program for Merge Sort 
#include <iostream> 
using namespace std; 

// Merges two subarrays of array[]. 
// First subarray is arr[begin..mid] 
// Second subarray is arr[mid+1..end] 
void merge(int array[], int const left, 
		int const mid, int const right) 
{ 
	auto const subArrayOne = mid - left + 1; 
	auto const subArrayTwo = right - mid; 

	// Create temp arrays 
	auto *leftArray = new int[subArrayOne], 
		*rightArray = new int[subArrayTwo]; 

	// Copy data to temp arrays leftArray[] 
	// and rightArray[] 
	for (auto i = 0; i < subArrayOne; i++) 
		leftArray[i] = array[left + i]; 
	for (auto j = 0; j < subArrayTwo; j++) 
		rightArray[j] = array[mid + 1 + j]; 

	// Initial index of first sub-array 
	// Initial index of second sub-array 
	auto indexOfSubArrayOne = 0, 
		indexOfSubArrayTwo = 0; 

	// Initial index of merged array 
	int indexOfMergedArray = left; 

	// Merge the temp arrays back into 
	// array[left..right] 
	while (indexOfSubArrayOne < subArrayOne && 
		indexOfSubArrayTwo < subArrayTwo) 
	{ 
		if (leftArray[indexOfSubArrayOne] <= 
			rightArray[indexOfSubArrayTwo]) 
		{ 
			array[indexOfMergedArray] = 
			leftArray[indexOfSubArrayOne]; 
			indexOfSubArrayOne++; 
		} 
		else
		{ 
			array[indexOfMergedArray] = 
			rightArray[indexOfSubArrayTwo]; 
			indexOfSubArrayTwo++; 
		} 
		indexOfMergedArray++; 
	} 
	
	// Copy the remaining elements of 
	// left[], if there are any 
	while (indexOfSubArrayOne < subArrayOne) 
	{ 
		array[indexOfMergedArray] = 
		leftArray[indexOfSubArrayOne]; 
		indexOfSubArrayOne++; 
		indexOfMergedArray++; 
	} 

	// Copy the remaining elements of 
	// right[], if there are any 
	while (indexOfSubArrayTwo < subArrayTwo) 
	{ 
		array[indexOfMergedArray] = 
		rightArray[indexOfSubArrayTwo]; 
		indexOfSubArrayTwo++; 
		indexOfMergedArray++; 
	} 
} 

// begin is for left index and end is 
// right index of the sub-array 
// of arr to be sorted */ 
void mergeSort(int array[], 
			int const begin, 
			int const end) 
{ 
	// Returns recursively 
	if (begin >= end) 
		return; 

	auto mid = begin + (end - begin) / 2; 
	mergeSort(array, begin, mid); 
	mergeSort(array, mid + 1, end); 
	merge(array, begin, mid, end); 
} 

// UTILITY FUNCTIONS 
// Function to print an array 
void printArray(int A[], int size) 
{ 
	for (auto i = 0; i < size; i++) 
		cout << A[i] << " "; 
	cout<<endl; 
} 

// Driver code 
int main() 
{ 
	int arr[] = { 12, 11, 13, 5, 6, 7 }; 
	auto arr_size = sizeof(arr) / sizeof(arr[0]); 

	cout << "Given array is "<<endl; 
	printArray(arr, arr_size); 

	mergeSort(arr, 0, arr_size - 1); 

	cout << "Sorted array is "<<endl; 
	printArray(arr, arr_size); 
	return 0; 
} 

//Output
// Given array is 
// 12 11 13 5 6 7 

// Sorted array is 
// 5 6 7 11 12 13 


#include <bits/stdc++.h>
using namespace std;

int partition(int arr[],int low,int high)
{

int pivot=arr[high];
int i=(low-1);

for(int j=low;j<=high;j++)
{
    if(arr[j]<pivot)
    {
    i++;
    swap(arr[i],arr[j]);
    }
}
swap(arr[i+1],arr[high]);
return (i+1);
}

            
void quickSort(int arr[],int low,int high)
{

if(low<high)
{
    
    int pi=partition(arr,low,high);
    
    quickSort(arr,low,pi-1);
    quickSort(arr,pi+1,high);
}
}
            

int main() {
int arr[]={10,7,8,9,1,5};
int n=sizeof(arr)/sizeof(arr[0]);

quickSort(arr,0,n-1);

cout<<"Sorted Array\n";
for(int i=0;i<n;i++)
{
    cout<<arr[i]<<" ";
}
return 0;
}


//Output
// Sorted Array
// 1 5 7 8 9 10 



H) Write a program to calculate Fibonacci numbers and find its step count

#include <iostream>
#include <map>

std::map<int, long long> memo; // Memoization to store computed Fibonacci values

// Function to calculate the nth Fibonacci number using recursion
long long fib(int n, int& steps) {
    steps++; // Count the number of steps

    if (n <= 1) {
        return n;
    }

    // Check if the value is already memoized
    if (memo.find(n) != memo.end()) {
        return memo[n];
    }

    // Calculate the Fibonacci number using recursion
    long long result = fib(n - 1, steps) + fib(n - 2, steps);
    
    // Memoize the result for future use
    memo[n] = result;

    return result;
}

int main() {
    int n;
    std::cout << "Enter the value of n: ";
    std::cin >> n;

    int steps = 0; // Initialize the step count to zero
    long long result = fib(n, steps);

    std::cout << "Fibonacci(" << n << ") = " << result << std::endl;
    std::cout << "Total steps taken: " << steps << std::endl;

    return 0;
}

